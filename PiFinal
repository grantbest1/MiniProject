#This code will be used to determine which quadrant the marker is in.
from picamera.array import PiRGBArray
from picamera import PiCamera
import cv2
from cv2 import aruco
import numpy
import math
import time
import smbus
import board
import busio
import adafruit_character_lcd.character_lcd_rgb_i2c as character_lcd
quadrant = 5
desired = 0
old_quad = 0
camera = PiCamera()
rawCapture = PiRGBArray(camera)
camera.iso = 100
time.sleep(2)
camera.shutter_speed = camera.exposure_speed
camera.exposure_mode = 'off'
gain = camera.awb_gains
camera.awb_mode = 'off'
camera.awb_gains = gain
time.sleep(0.1)
aruco_dictionary = aruco.Dictionary_get(aruco.DICT_6X6_250)
parameters = aruco.DetectorParameters_create()
#The above code has been taken from previous assingments to set up the camera.
#The below code will be using aruco marker detection in order to figure out what quadrant it is. The project description 4.5 says to use aruco marker detection
#In order to figure how to use aruco marker detection, I used this website:https://docs.opencv.org/4.5.3/d5/dae/tutorial_aruco_detection.html
def computervision():
    global quadrant
    global marker_found
    marker_found = False
    camera.capture(rawCapture, format = "bgr")
    image = rawCapture.array
    display = rawCapture.array
    cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)
    #Here is where I used the aruco markers in order to to find the indexes of where marker was.
    corners,ids,rejectedImgPoints = aruco.detectMarkers(image,aruco_dictionary, parameters=parameters)
    if type(ids) == numpy.ndarray:
        marker_found = True
        output_array = numpy.ndarray(len(ids))
        index = 0
        for i in ids:
            for j in i:
            #The following uses corners and then averages the different x values to get the center of the marker horizontally
                xdirection1 =(corners[index][0][1][0] + corners[index][0][0][0])/2
                xdirection2 = (corners[index][0][2][0] + corners[index][0][3][0])/2
                xcenter = (xdirection1 + xdirection2)/2
            #The following uses corners and then averages the different y values to get the center of the marker vertically   
                ydirection1 = (corners[index][0][1][1] + corners[index][0][2][1])/2
                ydirection2 = (corners[index][0][3][1] + corners[index][0][0][1])/2
                ycenter = (ydirection1 + ydirection2)/2
                #after finding the centers of the marker, find the centers of the entire picture taken
                Xmiddleofimage = image.shape[1]/2
                Ymiddleofimage = image.shape[0]/2
                #These if statements were used in order to assign quadrants depending on the values of the centers of the aruco marker.
                if xcenter > Xmiddleofimage and ycenter > Ymiddleofimage:
                    quadrant = 4
                    desired = "4.71"
                    print("This is the quadrant: ", quadrant)
                if xcenter < Xmiddleofimage and ycenter > Ymiddleofimage:
                    quadrant = 3
                    desired = "3.14"
                    print("This is the quadrant: ", quadrant)
                if xcenter < Xmiddleofimage and ycenter < Ymiddleofimage:
                    quadrant = 2
                    desired = "1.57"
                    print("This is the quadrant: ", quadrant)
                if xcenter > Xmiddleofimage and ycenter <Ymiddleofimage:
                    quadrant = 1
                    desired = "0"
                    print("This is the quadrant: ", quadrant)
                output_array[index] = j
                index +=1
    rawCapture.truncate(0)
    if marker_found == False:
        print("No markers found")
        


#for RPI version 1, use “bus = smbus.SMBus(0)”
bus = smbus.SMBus(1)

# Modify this if you have a different sized Character LCD
columns = 16
rows = 2

# Initialise I2C bus.
i2c = busio.I2C(board.SCL,board.SDA)  

# Initialise the LCD class
lcd = character_lcd.Character_LCD_RGB_I2C(i2c, columns, rows)

lcd.clear()
#this is the address we setup in the Arduino Program
address = 0x04

#Function to write position to the arduino
def writePosition(value):
    bus.write_byte(address, value)
    return -1

#Function to read position back from Arduino
def readPosition():
    number = bus.read_byte(address)
    return number

def systemIntegration():
    #Defines old_quad as a global variable to be used later
    global old_quad
    #Writes quadrant value to Arduino and LCD
    writePosition(quadrant)
    print ("RPI: Arduino, move to position ", quadrant)
    lcd.color = [100,0,0]
    lcd.text_direction = lcd.LEFT_TO_RIGHT
    lcd.message = "Move to pos. " + str(quadrant)
    #sleep one second
    time.sleep(2)
    lcd.clear()
    #Read position from Arduino
    number = readPosition()
    #Compares new and old position to tell LCD what to display
    if quadrant == old_quad:
        print ("Already at position ", quadrant)
        #Sets LCD color
        lcd.color = [0,0,100]
        #Sets direction to display text on LCD
        lcd.text_direction = lcd.LEFT_TO_RIGHT
        #Message to be displayed on LCD
        lcd.message = "Already at pos.\n " + str(quadrant)
        #sleep one second
        time.sleep(2)
        #Clear LCD
        lcd.clear()
    else:            
        print ("Arduino: Hey RPI, I moved to ", number)
        lcd.color = [0,100,0]
        lcd.text_direction = lcd.LEFT_TO_RIGHT
        lcd.message = "Moved to pos. " + str(number)
        time.sleep(2)
        lcd.clear()
        lcd.color = [0,0,0]
    old_quad = quadrant

#Infinite loop to constantly run the program
while True:
    #Runs CV function
    computervision()
    #Determines whether SI function should be run based off CV funtion
    if marker_found == True:            
        systemIntegration()
    else:
        print ("RPI: Marker not found.")
        lcd.color = [100,100,0]
        lcd.text_direction = lcd.LEFT_TO_RIGHT
        lcd.message = "Marker not found"
        time.sleep(2)
        lcd.clear()
        lcd.color = [0,0,0]
            
